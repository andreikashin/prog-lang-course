Standard ML of New Jersey v110.79 [built: Tue Aug  8 23:21:20 2017]
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:83.2-83.10 Error: unbound variable or constructor: fullname

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:81.18-81.20 Error: unbound variable or constructor: x'

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:114.21 Warning: calling polyEqual
hw2.sml:107.27 Warning: calling polyEqual
hw2.sml:34.23 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_item = fn : string * string list -> string list
val all_except_item_tail = fn
  : string list * string * string list -> string list
val contains = fn : ''a * ''a list -> bool
val append = fn : 'a list * 'a list -> 'a list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val it = () : unit
- use "hw2test.sml";
[opening hw2test.sml]
hw2test.sml:32.14-32.23 Error: unbound variable or constructor: officiate
hw2test.sml:34.14-34.23 Error: unbound variable or constructor: officiate
hw2test.sml:39.16-39.25 Error: unbound variable or constructor: officiate

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:114.21 Warning: calling polyEqual
hw2.sml:107.27 Warning: calling polyEqual
hw2.sml:34.23 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_item = fn : string * string list -> string list
val all_except_item_tail = fn
  : string list * string * string list -> string list
val contains = fn : ''a * ''a list -> bool
val append = fn : 'a list * 'a list -> 'a list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : 'a -> int
val it = () : unit
- use "hw2test.sml";
[opening hw2test.sml]
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val test11 = false : bool
val test12 = false : bool
val test13 = false : bool
val it = () : unit
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:152.19-152.21 Error: syntax error: replacing  OF with  AS
hw2.sml:161.2-161.5 Error: syntax error: replacing  FUN with  EQUALOP

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:161.2-161.5 Error: syntax error: replacing  FUN with  EQUALOP

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:150.11-150.13 Error: unbound variable or constructor: mv
hw2.sml:152.39-152.45 Error: unbound variable or constructor: remove

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:152.39-152.45 Error: unbound variable or constructor: remove

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:152.39-152.45 Error: unbound variable or constructor: remove

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:114.21 Warning: calling polyEqual
hw2.sml:107.27 Warning: calling polyEqual
hw2.sml:34.23 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_item = fn : string * string list -> string list
val all_except_item_tail = fn
  : string list * string * string list -> string list
val contains = fn : ''a * ''a list -> bool
val append = fn : 'a list * 'a list -> 'a list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : card list * move list * int -> int
val it = () : unit
- use "hw2test.sml";
[opening hw2test.sml]
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val test11 = false : bool
val test12 = false : bool
val test13 = false : bool
val it = () : unit
- officiate ([(Hearts, Num 2),(Clubs, Num 4)],[Draw], 15);
val it = 0 : int
- officiate ([(Hearts, Num 2),(Clubs, Num 4)],[Draw], 15);
val it = 0 : int
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:114.21 Warning: calling polyEqual
hw2.sml:107.27 Warning: calling polyEqual
hw2.sml:34.23 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_item = fn : string * string list -> string list
val all_except_item_tail = fn
  : string list * string * string list -> string list
val contains = fn : ''a * ''a list -> bool
val append = fn : 'a list * 'a list -> 'a list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
- use "hw2test.sml";
[opening hw2test.sml]
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val test11 = false : bool
val test12 = false : bool
val test13 = false : bool
val it = () : unit
- officiate ([(Hearts, Num 2),(Clubs, Num 4)],[Draw], 15);
val it = 0 : int
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:114.21 Warning: calling polyEqual
hw2.sml:107.27 Warning: calling polyEqual
hw2.sml:34.23 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_item = fn : string * string list -> string list
val all_except_item_tail = fn
  : string list * string * string list -> string list
val contains = fn : ''a * ''a list -> bool
val append = fn : 'a list * 'a list -> 'a list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
- use "hw2test.sml";
[opening hw2test.sml]
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val test11 = false : bool
val test12 = false : bool
val test13 = false : bool
val it = () : unit
- officiate ([(Hearts, Num 2),(Clubs, Num 4)],[Draw], 15);
val it = 0 : int
- officiate ([(Hearts, Num 2),(Clubs, Num 4)],[Discard(Hearts, Num 2)], 15);
discard
uncaught exception IllegalMove
  raised at: hw2.sml:118.13
- officiate ([(Hearts, Num 2),(Clubs, Num 4)],[Discard(Clubs, Num 4)], 15);
discard
uncaught exception IllegalMove
  raised at: hw2.sml:118.13
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:155.30 Error: syntax error: replacing  SEMICOLON with  EQUALOP

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:114.21 Warning: calling polyEqual
hw2.sml:107.27 Warning: calling polyEqual
hw2.sml:34.23 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_item = fn : string * string list -> string list
val all_except_item_tail = fn
  : string list * string * string list -> string list
val contains = fn : ''a * ''a list -> bool
val append = fn : 'a list * 'a list -> 'a list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
- officiate ([(Hearts, Num 2),(Clubs, Num 4)],[Discard(Clubs, Num 4)], 15);
discard
uncaught exception IllegalMove
  raised at: hw2.sml:118.13
- officiate ([(Hearts, Num 2),(Clubs, Num 4)],[Draw], 15);
val it = 0 : int
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:114.21 Warning: calling polyEqual
hw2.sml:107.27 Warning: calling polyEqual
hw2.sml:34.23 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_item = fn : string * string list -> string list
val all_except_item_tail = fn
  : string list * string * string list -> string list
val contains = fn : ''a * ''a list -> bool
val append = fn : 'a list * 'a list -> 'a list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
- officiate ([(Hearts, Num 2),(Clubs, Num 4)],[Draw], 15);
val it = 6 : int
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:114.21 Warning: calling polyEqual
hw2.sml:107.27 Warning: calling polyEqual
hw2.sml:34.23 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_item = fn : string * string list -> string list
val all_except_item_tail = fn
  : string list * string * string list -> string list
val contains = fn : ''a * ''a list -> bool
val append = fn : 'a list * 'a list -> 'a list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
- use "hw2test.sml";
[opening hw2test.sml]
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val test11 = true : bool
val test12 = false : bool
val test13 = false : bool
val it = () : unit
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:114.21 Warning: calling polyEqual
hw2.sml:107.27 Warning: calling polyEqual
hw2.sml:34.23 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_item = fn : string * string list -> string list
val all_except_item_tail = fn
  : string list * string * string list -> string list
val contains = fn : ''a * ''a list -> bool
val append = fn : 'a list * 'a list -> 'a list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
- use "hw2test.sml";
[opening hw2test.sml]
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val test11 = true : bool
val test12 = false : bool
val test13 = false : bool
val it = () : unit
- officiate ([(Clubs,Ace),(Spades,Ace),(Clubs,Ace),(Spades,Ace)],
                        [Draw,Draw,Draw,Draw,Draw],
                        42);
= = val it = 15 : int
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:114.21 Warning: calling polyEqual
hw2.sml:107.27 Warning: calling polyEqual
hw2.sml:34.23 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_item = fn : string * string list -> string list
val all_except_item_tail = fn
  : string list * string * string list -> string list
val contains = fn : ''a * ''a list -> bool
val append = fn : 'a list * 'a list -> 'a list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
- officiate ([(Clubs,Ace),(Spades,Ace),(Clubs,Ace),(Spades,Ace)],
                        [Draw,Draw,Draw,Draw,Draw],
                        42);
= = endval it = 15 : int
- officiate ([(Hearts, Num 2),(Clubs, Num 4)],[Draw], 15);
endval it = 6 : int
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:114.21 Warning: calling polyEqual
hw2.sml:107.27 Warning: calling polyEqual
hw2.sml:34.23 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_item = fn : string * string list -> string list
val all_except_item_tail = fn
  : string list * string * string list -> string list
val contains = fn : ''a * ''a list -> bool
val append = fn : 'a list * 'a list -> 'a list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
- officiate ([(Hearts, Num 2),(Clubs, Num 4)],[Draw], 15);
endval it = 6 : int
- officiate ([(Hearts, Num 2),(Clubs, Num 4)],[Draw, Draw], 15);
endval it = 6 : int
- officiate ([(Hearts, Num 2),(Clubs, Num 4)],[Draw, Draw, Draw], 15);
endval it = 6 : int
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:114.21 Warning: calling polyEqual
hw2.sml:107.27 Warning: calling polyEqual
hw2.sml:34.23 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_item = fn : string * string list -> string list
val all_except_item_tail = fn
  : string list * string * string list -> string list
val contains = fn : ''a * ''a list -> bool
val append = fn : 'a list * 'a list -> 'a list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
- officiate ([(Hearts, Num 2),(Clubs, Num 4)],[Draw, Draw, Draw], 15);
end
val it = 6 : int
- officiate ([(Clubs,Ace),(Spades,Ace),(Clubs,Ace),(Spades,Ace)],
                        [Draw,Draw,Draw,Draw,Draw],
                        42);
= = end
val it = 15 : int
- officiate ([(Clubs,Ace),(Spades,Ace),(Clubs,Ace),(Spades,Ace)],
                        [Draw],
                        42);
= = end
val it = 15 : int
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:114.21 Warning: calling polyEqual
hw2.sml:107.27 Warning: calling polyEqual
hw2.sml:34.23 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_item = fn : string * string list -> string list
val all_except_item_tail = fn
  : string list * string * string list -> string list
val contains = fn : ''a * ''a list -> bool
val append = fn : 'a list * 'a list -> 'a list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
- officiate ([(Clubs,Ace),(Spades,Ace),(Clubs,Ace),(Spades,Ace)],
                        [Draw],
                        42);
= = val it = 21 : int
- use "hw2test.sml";
[opening hw2test.sml]
end
end
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val test11 = false : bool
val test12 = false : bool
val test13 = false : bool
val it = () : unit
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:150.6-164.6 Error: case object and rules don't agree [tycon mismatch]
  rule domain: (suit * rank) list * move list * (suit * rank) list
  object: move list
  in expression:
    (case mvs
      of (:: (<pat>,<pat>),nil,held) => score (held,goal)
       | (cs,:: (<pat>,<pat>),held) => (print "disc\n"; h (<exp>,<exp>,<exp>))
       | (:: (<pat>,<pat>),:: (<pat>,<pat>),held) =>
           score (<exp> :: <exp>,goal)
       | (nil,:: (<pat>,<pat>),held) =>
           (print "empty cs\n"; score (<exp>,<exp>))
       | (:: (<pat>,<pat>),:: (<pat>,<pat>),held) =>
           let val <pat> = <exp>
           in if <exp> > <exp> then (<exp>; <exp>) else (<exp>; <exp>)
           end)

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:149.13-160.9 Warning: match nonexhaustive
          (c :: cs',nil,held) => ...
          (cs,Discard c :: ms,held) => ...
          (c :: cs',Draw :: nil,held) => ...
          (nil,Draw :: ms,held) => ...
          (c :: cs',Draw :: ms,held) => ...
  
hw2.sml:114.21 Warning: calling polyEqual
hw2.sml:107.27 Warning: calling polyEqual
hw2.sml:34.23 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_item = fn : string * string list -> string list
val all_except_item_tail = fn
  : string list * string * string list -> string list
val contains = fn : ''a * ''a list -> bool
val append = fn : 'a list * 'a list -> 'a list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
- use "hw2test.sml";
[opening hw2test.sml]
end
end
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = true : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val test11 = true : bool
val test12 = false : bool
val test13 = false : bool
val it = () : unit
- officiate ([(Clubs,Ace),(Spades,Ace),(Clubs,Ace),(Spades,Ace)],
                        [Draw],
                        42);
= = val it = 15 : int
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:149.13-161.9 Warning: match nonexhaustive
          (c :: cs',nil,held) => ...
          (cs,Discard c :: ms,held) => ...
          (c :: cs',Draw :: nil,held) => ...
          (nil,Draw :: ms,held) => ...
          (c :: cs',Draw :: ms,held) => ...
  
hw2.sml:114.21 Warning: calling polyEqual
hw2.sml:107.27 Warning: calling polyEqual
hw2.sml:34.23 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_item = fn : string * string list -> string list
val all_except_item_tail = fn
  : string list * string * string list -> string list
val contains = fn : ''a * ''a list -> bool
val append = fn : 'a list * 'a list -> 'a list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
- officiate ([(Clubs,Ace),(Spades,Ace),(Clubs,Ace),(Spades,Ace)],
                        [Draw],
                        42);
= = last draw
val it = 15 : int
- officiate ([(Hearts, Num 2),(Clubs, Num 4)],[Draw], 15);
last draw
val it = 6 : int
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:149.13-162.9 Warning: match nonexhaustive
          (c :: cs',nil,held) => ...
          (cs,Discard c :: ms,held) => ...
          (c :: cs',Draw :: nil,held) => ...
          (nil,Draw :: ms,held) => ...
          (c :: cs',Draw :: ms,held) => ...
  
hw2.sml:114.21 Warning: calling polyEqual
hw2.sml:107.27 Warning: calling polyEqual
hw2.sml:34.23 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_item = fn : string * string list -> string list
val all_except_item_tail = fn
  : string list * string * string list -> string list
val contains = fn : ''a * ''a list -> bool
val append = fn : 'a list * 'a list -> 'a list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
- officiate ([(Hearts, Num 2),(Clubs, Num 4)],[Draw], 15);
last draw
val it = 6 : int
- officiate ([(Clubs,Ace),(Spades,Ace),(Clubs,Ace),(Spades,Ace)],
                        [Draw],
                        42);
= = last draw
val it = 15 : int
- officiate ([(Clubs,Ace),(Spades,Ace),(Clubs,Ace),(Spades,Ace)],
                        [Draw,Draw,Draw,Draw,Draw],
                        42);
= = end
val it = 15 : int
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:158.3 Error: syntax error: inserting  IN ID END
hw2.sml:167.5 Error: syntax error: inserting  LET

uncaught exception Compile [Compile: "syntax error"]
  raised at: ../compiler/Parse/main/smlfile.sml:15.24-15.46
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:149.13-163.10 Warning: match nonexhaustive
          (c :: cs',nil,held) => ...
          (cs,Discard c :: ms,held) => ...
          (c :: cs',Draw :: nil,held) => ...
          (nil,Draw :: ms,held) => ...
          (c :: cs',Draw :: ms,held) => ...
  
hw2.sml:114.21 Warning: calling polyEqual
hw2.sml:107.27 Warning: calling polyEqual
hw2.sml:34.23 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_item = fn : string * string list -> string list
val all_except_item_tail = fn
  : string list * string * string list -> string list
val contains = fn : ''a * ''a list -> bool
val append = fn : 'a list * 'a list -> 'a list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
- officiate ([(Clubs,Ace),(Spades,Ace),(Clubs,Ace),(Spades,Ace)],
                        [Draw,Draw,Draw,Draw,Draw],
                        42);
= = drawingend
val it = 15 : int
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:158.7-158.15 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string
  operand:         suit * rank
  in expression:
    print c

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:158.13-158.21 Error: unbound variable or constructor: toString

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
[autoloading]
[autoloading done]
hw2.sml:158.13-158.31 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string
  operand:         suit * rank
  in expression:
    String.toString c

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:158.13-158.32 Error: operator and operand don't agree [overload conflict]
  operator domain: string
  operand:         [int ty]
  in expression:
    String.toString 13

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:149.13-164.10 Warning: match nonexhaustive
          (c :: cs',nil,held) => ...
          (cs,Discard c :: ms,held) => ...
          (c :: cs',Draw :: nil,held) => ...
          (nil,Draw :: ms,held) => ...
          (c :: cs',Draw :: ms,held) => ...
  
hw2.sml:114.21 Warning: calling polyEqual
hw2.sml:107.27 Warning: calling polyEqual
hw2.sml:34.23 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_item = fn : string * string list -> string list
val all_except_item_tail = fn
  : string list * string * string list -> string list
val contains = fn : ''a * ''a list -> bool
val append = fn : 'a list * 'a list -> 'a list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
- officiate ([(Clubs,Ace),(Spades,Ace),(Clubs,Ace),(Spades,Ace)],
                        [Draw,Draw,Draw,Draw,Draw],
                        42);
= = drawing11end
val it = 15 : int
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:159.7-159.27 Error: operator and operand don't agree [tycon mismatch]
  operator domain: string
  operand:         color
  in expression:
    print (card_color c)

uncaught exception Error
  raised at: ../compiler/TopLevel/interact/evalloop.sml:66.19-66.27
             ../compiler/TopLevel/interact/evalloop.sml:44.55
             ../compiler/TopLevel/interact/evalloop.sml:292.17-292.20
- use "hw2.sml";
[opening hw2.sml]
[opening ../w2/hw1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val oldest = fn : (int * int * int) list -> (int * int * int) option
val number_in_months_challenge = fn : unit -> int
val remove_duplicates = fn : 'a list -> int
val it = () : unit
hw2.sml:149.13-164.10 Warning: match nonexhaustive
          (c :: cs',nil,held) => ...
          (cs,Discard c :: ms,held) => ...
          (c :: cs',Draw :: nil,held) => ...
          (nil,Draw :: ms,held) => ...
          (c :: cs',Draw :: ms,held) => ...
  
hw2.sml:114.21 Warning: calling polyEqual
hw2.sml:107.27 Warning: calling polyEqual
hw2.sml:34.23 Warning: calling polyEqual
val same_string = fn : string * string -> bool
val all_except_item = fn : string * string list -> string list
val all_except_item_tail = fn
  : string list * string * string list -> string list
val contains = fn : ''a * ''a list -> bool
val append = fn : 'a list * 'a list -> 'a list
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Ace | Jack | King | Num of int | Queen
type card = suit * rank
datatype color = Black | Red
datatype move = Discard of suit * rank | Draw
exception IllegalMove
val all_except_option = fn : string * string list -> string list option
val get_substitutions1 = fn : string list list * string -> string list
val get_substitutions2 = fn : string list list * string -> string list
val similar_names = fn
  : string list list * {first:string, last:'a, middle:'b}
    -> {first:string, last:'a, middle:'b} list
val card_color = fn : suit * 'a -> color
val card_value = fn : 'a * rank -> int
val remove_card = fn : ''a list * ''a * exn -> ''a list
val all_same_color = fn : (suit * 'a) list -> bool
val sum_cards = fn : ('a * rank) list -> int
val score = fn : (suit * rank) list * int -> int
val officiate = fn : (suit * rank) list * move list * int -> int
val it = () : unit
- officiate ([(Clubs,Ace),(Spades,Ace),(Clubs,Ace),(Spades,Ace)],
                        [Draw,Draw,Draw,Draw,Draw],
                        42);
= = drawing11end
val it = 15 : int
- 